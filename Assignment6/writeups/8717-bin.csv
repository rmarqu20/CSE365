8717-bin,1,AceBear CTF: Secure login (reverse)
8717-bin,2,"In this article I will share with you the solution to Secure Login challenge presented at Acebear CTF, this task was worth 900 points"
8717-bin,3,"Even though I did not manage to solve the challenge on time, I still enjoyed it a lot."
8717-bin,4,The task description was the following:
8717-bin,5,Download Link
8717-bin,6,Please run solution using ubuntu 16.04
8717-bin,7,Time of server is UTC+000
8717-bin,8,By downloading the binary and running it we get this:
8717-bin,9,**************************Welcome to secure login**************************
8717-bin,10,*************************Challenge Created By CNV**************************
8717-bin,11,Give me your name: Segflow
8717-bin,12,"So mainly the binary prints a hello message, the current time, and then asks us about the name and the password"
8717-bin,13,"Obviously, the credentials we typed in are not correct, which made the server answer back with an error message"
8717-bin,14,It also points out that the password type is wrong.
8717-bin,15,I always prefer to use a static analysis first and then a dynamic analysis to understand the behavior of a binary.
8717-bin,16,"For the static analysis, I highly rely on Binary Ninja and its beautiful interface"
8717-bin,17,"At the start of the main function there is a call to sub_8048aa3 which prints the hello message, and later calls srand(time(NULL))"
8717-bin,18,So it's seeding the random number generator with the current timestamp.
8717-bin,19,"And since the server also prints the current time, we can know in advance any random number the server will generate using the rand function"
8717-bin,20,"Let's have this in mind, maybe we can use it."
8717-bin,21,"Right after that, a check is done to verify that the password length is 64, if it's not the program prints Wrong password type! and exits"
8717-bin,22,The check was the following:
8717-bin,23,08048c6b  call    read_password
8717-bin,24,"08048c70  add     esp, 0x10"
8717-bin,25,"08048c82  add     esp, 0x10"
8717-bin,26,08048c88  jne     FAIL @0x8048ca0
8717-bin,27,"Also after this, another check is done (function sub_80488ed), where the password is verified to only contain hexadecimal characters (a-ZA-Z0-9), if it does not, the program prints Wrong password type! and exits."
8717-bin,28,"With this in mind, let's try again with a valid password type, e.g: 64 character password with only hexadecimal characters"
8717-bin,29,**************************Welcome to secure login**************************
8717-bin,30,*************************Challenge Created By CNV**************************
8717-bin,31,Give me your name: Segflow
8717-bin,32,Generated password: 85ED3925E8E7A00B06A350DF5F5FDE4F22D3929776D721E3172E0B66FBAA48BF
8717-bin,33,"Great! Now the program prints a Generated password and then a Password incorrect! message, hmmm"
8717-bin,34,"Going back to Binary Ninja, we see this blocks:"
8717-bin,35,Basically the logic behind this can be described by this pseudo-code:
8717-bin,36,"So the function generate_password will receive our typed password as an argument, do some magic and return a new string"
8717-bin,37,"If the generated password is F05664E983F54E5FA6D5D4FFC5BF930743F60D8FC2C78AFBB0AF7C82664F2043 we win, else we lose."
8717-bin,38,"So, in order to solve this, we need to reverse engineer the generate_password function so we can control its result and pass the strcmp check."
8717-bin,39,"The following loop can easily be spotted, by reading it carefully we knew that the password generation happens here:"
8717-bin,40,"With some assembly skills, we can re-write it using this pseudo code:"
8717-bin,41,"i = 0    # 0x080489bf  mov     dword [ebp-0x28], 0x0"
8717-bin,42,"d = 0x804b0c0  # 0x080489e5  add     eax, 0x804b0c0"
8717-bin,43,"c = strtoul(d[i*4, i*4+4], 16)  # what's d??!"
8717-bin,44,result += int_to_hex(r & 0xffff)
8717-bin,45,"i = i + 1 # 0x08048a70  add     dword [ebp-0x28], 0x1"
8717-bin,46,"Mainly we loop over the user_input, taking 4 bytes each time and converting them to a long integer by calling strtoul"
8717-bin,47,"Remember that the user input should only contain hexadecimal characters, that's why the third argument to strtoul, the base argument, is 16."
8717-bin,48,"The only unknown value here is the value of d, by following the cross-references of the address 0x804b0c0, I found that when the program starts, in addition to printing the hello message, a file with the name key is opened and its content is read into the address 0x804b0c0."
8717-bin,49,"Humm, we do not have the key file, so at this point, I started looking for a way to leak it"
8717-bin,50,"Fortunately, the programs prints the generated password even though it does not match the correct one, and with that fact, we can craft a special input so that the generated password that will get printed is, in fact, the key."
8717-bin,51,"Basically, we need to make the generation algorithm only depends on the key and nothing else, which means nullify the value of x"
8717-bin,52,"Since at the start s is null, we can nullify the value of x simply by forcing a to be equal to the value of b so that the value of x will be:"
8717-bin,53,"We know that in the first iteration s is equal to 0, which means that x is 0, which also means that r is, in fact, equal to c (the first 4 bytes of the key)"
8717-bin,54,"And just like that, we are able to leak the first 4 bytes of the key, simply by forcing a to be equal to b."
8717-bin,55,"Since we know the time of the server (UTC+0-), we can locally use srand to seed the random number generator with the server time so we can predict the random numbers(huh? is it random?!) that will be used by the server."
8717-bin,56,"srand and rand are both parts of the c library libc, but we can also use them in python through the ctypes module."
8717-bin,57,# Wait for the hello message and get the server time
8717-bin,58,"Now every time we call libc.rand() we will get the same random number the server will get, thus allowing us to leak the value of the key, 4 bytes each time"
8717-bin,59,"After the first iteration, s will no longer contain null, it will contain the first leaked 4 bytes"
8717-bin,60,"Again to leak the second 4 bytes, we need to nullify the value of x, to do so we just need to have the value of the second 4 bytes of the input equal to b XOR s,"
8717-bin,61,Which lets us leak the second 4bytes on the key
8717-bin,62,"By continuing with the same trick we can leak the full key, To make the post short, I will leave this as an exercise for the reader."
8717-bin,63,The leaked key bytes are:
8717-bin,64,And the final hash bytes should be:
8717-bin,65,"At this point, we have all the data needed to come up with an input that, when processed by the algorithm, the result bytes should be equal to correct."
8717-bin,66,"You can do that manually if you are good at maths, or use a Theorem Prover like z3 to do that"
8717-bin,67,I'm bad at math so you can guess what approach I chose.
8717-bin,68,The final code is the following:
8717-bin,69,And we run it:
8717-bin,70,**************************Welcome to secure login**************************
8717-bin,71,*************************Challenge Created By CNV**************************
8717-bin,72,Give me your name: Welcome: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
8717-bin,73,Gime me your password: Generated password: F05664E983F54E5FA6D5D4FFC5BF930743F60D8FC2C78AFBB0AF7C82664F2043
8717-bin,74,This is flag: AceBear{thi5_i5_fl4g_f0r_y0u}
8717-bin,75,[*] Got EOF while reading in interactive
8717-bin,76,Please enable JavaScript to view the comments powered by Disqus.
8717-bin,77,comments powered by Disqus
